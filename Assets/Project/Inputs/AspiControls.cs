//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Project/Inputs/AspiControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AspiControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AspiControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AspiControls"",
    ""maps"": [
        {
            ""name"": ""Aspirator"",
            ""id"": ""1ebad33e-6ea3-4996-96b4-4f1a74389531"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""2596623e-fa78-4d2b-824b-1c092d1d5933"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1c41a3e4-3184-4a24-a7b2-4059c0f8d323"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""0c77653f-97da-4d6e-94f8-befe39a59e52"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""19ef139d-5f20-4f19-af56-bb4b240be617"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""5083dd59-8bd5-4dce-82c6-ae79923ff0d2"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""66637677-48eb-41dc-a80b-21c38f00430a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Aspirator
        m_Aspirator = asset.FindActionMap("Aspirator", throwIfNotFound: true);
        m_Aspirator_Movement = m_Aspirator.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Aspirator
    private readonly InputActionMap m_Aspirator;
    private List<IAspiratorActions> m_AspiratorActionsCallbackInterfaces = new List<IAspiratorActions>();
    private readonly InputAction m_Aspirator_Movement;
    public struct AspiratorActions
    {
        private @AspiControls m_Wrapper;
        public AspiratorActions(@AspiControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Aspirator_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Aspirator; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AspiratorActions set) { return set.Get(); }
        public void AddCallbacks(IAspiratorActions instance)
        {
            if (instance == null || m_Wrapper.m_AspiratorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AspiratorActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IAspiratorActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IAspiratorActions instance)
        {
            if (m_Wrapper.m_AspiratorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAspiratorActions instance)
        {
            foreach (var item in m_Wrapper.m_AspiratorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AspiratorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AspiratorActions @Aspirator => new AspiratorActions(this);
    public interface IAspiratorActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
